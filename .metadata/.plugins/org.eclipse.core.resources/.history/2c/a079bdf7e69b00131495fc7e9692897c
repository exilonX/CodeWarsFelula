/*
 * Copyright (C) 2011 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.example.baa;

import android.content.Context;
import android.opengl.GLSurfaceView;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;

/**
 * A view container where OpenGL ES graphics can be drawn on screen.
 * This view can also be used to capture touch events, such as a user
 * interacting with drawn objects.
 */
public class MultiplayerSurfaceView extends GLSurfaceView {

    private final MultiplayerRenderer mRenderer;

    public static Context context;
    
    private static float sheepSize = 80.0f;
    private static float upX = 381.0f;
    private static float upY = 115.0f;
    private static float downX = 381.0f;
    private static float downY = 935.0f;
    
    
    public MultiplayerSurfaceView(Context context) {
        super(context);

        this.context = context;
        
        // Create an OpenGL ES 2.0 context.
        setEGLContextClientVersion(2);
        setEGLConfigChooser(8, 8, 8, 8, 16, 0);

        // Set the Renderer for drawing on the GLSurfaceView
        mRenderer = new MultiplayerRenderer();
        setRenderer(mRenderer);

        // Render the view only when there is a change in the drawing data
        setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
    }

    private final float TOUCH_SCALE_FACTOR = 180.0f / 320;
    private float mPreviousX;
    private float mPreviousY;

    @Override
    public boolean onTouchEvent(MotionEvent e) {
        // MotionEvent reports input details from the touch screen
        // and other input controls. In this case, you are only
        // interested in events where the touch position changed.

    	float x = e.getX();
        float y = e.getY();
        
        Log.d("valoare x", "" + x);
        Log.d("valoare y", "" + y);
         
        if (e.getAction() == MotionEvent.ACTION_DOWN) {

            	 if (mRenderer != null)
                 {
                     // Ensure we call switchMode() on the OpenGL thread.
                     // queueEvent() is a method of GLSurfaceView that will do this for us.
            		 // 
            		 if ((x <= upX + sheepSize) && (x >= upX - sheepSize) &&(y <= upY + sheepSize ) && (y >= upY - sheepSize)) 
	                     queueEvent(new Runnable()
	                     {
	                         @Override
	                         public void run()
	                         {
	                             mRenderer.countUp++;
	                         }
	                     });
            		 
            		 else
	            		 if ((x <= downX + sheepSize) && (x >= downX - sheepSize) && (y <= downY + sheepSize ) && (y >= downY - sheepSize)) 
		                     queueEvent(new Runnable()
		                     {
		                         @Override
		                         public void run()
		                         {
		                             mRenderer.countDown++;
		                         }
		                     });
            		 if (Math.abs(mRenderer.countDown - mRenderer.countUp) > 30) {
            			 int winner = mRenderer.countDown > mRenderer.countUp ? 1 : 2;
            			 Intent intent_end = new Intent(this, EndActivity.class);
            			 startActivity(intent_end);
            		 }
                     return true;
                 }
        }
        
        return super.onTouchEvent(e);

}
}